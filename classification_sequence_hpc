def classification(df):
    stim = data[list(data)[0]]['net']['params']['stimSourceParams']['iclamp']
    stimend = stim['dur'] + stim['delay']
    dc=df[['amp','cellnum','spkt','phi','na','t']].copy()
    dc['Vlist'] = df.V_soma.apply(lambda x: x['cell_0'])
    dc['Vrmp'] = dc.Vlist.apply(lambda x: x[0])
    dc['spkend'] = df.spkt.apply(lambda x: x[len(x)-1] if len(x)>0 else -1)
    dc['scnt'] = df.spkt.apply(len)

    cnt = []
    for indx in dc.index:
        y = dc['Vlist'][indx]
        c = 0
        for i in range(0,len(y)-1):
            if (y[i] >= dc['Vrmp'][indx] and y[i + 1] < dc['Vrmp'][indx]) or (y[i] <= dc['Vrmp'][indx] and y[i + 1] > dc['Vrmp'][indx]):
                c = c+1
        cnt.append(c)
        del y

    dc['rmpCross'] = cnt
    del c,cnt

    
    
    print(dc.head())
    print(dc.tail())
    col_names = dc.columns.values.tolist()
    print(col_names)
    df_shape = dc.shape
    print("Number of rows: ", df_shape[0])
    print("Number of columns: ", df_shape[1])
    #print(dc.loc[15:20])
    unique_values = dc['amp'].unique()
    print(unique_values)

    

    # reorder df then have it print to matrix instead of summing
    dc = dc.rename(columns={'Doublet/Triplet/Quadruplet': 'Burst'})
    dc['Subthreshold'] = dc.scnt.apply(lambda x: 1 if x<1 else np.nan)
    dc['Phasic'] = dc.scnt.apply(lambda x: 1 if 0<x<=1 else np.nan)
    dc['Burst'] = dc[['spkend','scnt']].apply(lambda x: 1 if ((x.spkend<=(stim['delay']+((stimend+5)/4))) and (1<x.scnt<=4)) else np.nan, axis=1)
    dc['Tonic'] = dc.spkt.apply(lambda x: 1 if len(x)>=3 and stim['delay']<=x[-1]<=stimend+5 else np.nan) 
    dc['na'] = df['na'] 
    #dc['Post-stimulus Firing'] = dc.spkend.apply(lambda x: 1 if stimend+5<=x<=data[list(data)[0]]['simConfig']['duration'] else np.nan)
    #dc['Depolarisation Block'] = dc[['Vlist','scnt','rmpCross']].apply(lambda x: 1 if ((-40<= max(x.Vlist[df['t'][0].index(init):df['t'][0].index(end)])<-10) and (x.scnt==1) and (x.rmpCross==2)) else np.nan, axis =1)
    #dc['Tonic Block'] = dc[['Vlist','scnt','rmpCross','mxisi']].apply(lambda x: 1 if (((-40<= max(x.Vlist[df['t'][0].index(init):df['t'][0].index(end)])<-10) and (x.scnt>=1) and (x.rmpCross>2)) or (x.mxisi>=120))else np.nan, axis =1)
    #dc['Incomplete Repolarisation'] = dc[['scnt','rmpCross']].apply(lambda x: 1 if ((x.rmpCross==1) and (x.scnt==1)) else np.nan, axis =1)

    #dc = dc.iloc[::4, :]
    dc = dc.sort_values(['cellnum', 'na', 'phi', 'amp'], ascending=[True, True, True, True])
    print(dc.columns)
    dc.drop(['spkt','phi','Vrmp','spkend','rmpCross'],axis=1)
    dc.to_json('classification_test.json') 
    return dc
